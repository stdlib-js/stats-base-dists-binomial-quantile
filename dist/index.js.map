{
  "version": 3,
  "sources": ["../lib/search_left.js", "../lib/search_right.js", "../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar cdf = require( '@stdlib/stats-base-dists-binomial-cdf' );\n\n\n// MAIN //\n\n/**\n* Performs a search to the left.\n*\n* @private\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} r - probability\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `r` quantile of the specified distribution\n*/\nfunction searchLeft( x, r, n, p ) {\n\twhile ( x !== 0 && cdf( x-1, n, p) >= r ) {\n\t\tx -=1;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = searchLeft;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar cdf = require( '@stdlib/stats-base-dists-binomial-cdf' );\n\n\n// MAIN //\n\n/**\n* Performs a search to the right.\n*\n* @private\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} r - probability\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `r` quantile of the specified distribution\n*/\nfunction searchRight( x, r, n, p ) {\n\tx += 1;\n\twhile ( cdf( x, n, p ) < r ) {\n\t\tx += 1;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = searchRight;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math-base-assert-is-nonnegative-integer' );\nvar erfcinv = require( '@stdlib/math-base-special-erfcinv' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar round = require( '@stdlib/math-base-special-round' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar cdf = require( '@stdlib/stats-base-dists-binomial-cdf' );\nvar SQRT2 = require( '@stdlib/constants-float64-sqrt-two' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar searchLeft = require( './search_left.js' );\nvar searchRight = require( './search_right.js' );\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a binomial distribution with number of trials `n` and success probability `p` at a probability `r`.\n*\n* @param {Probability} r - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p  - success probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.4, 20, 0.2 );\n* // returns 3\n*\n* @example\n* var y = quantile( 0.8, 20, 0.2 );\n* // returns 5\n*\n* @example\n* var y = quantile( 0.5, 10, 0.4 );\n* // returns 4\n*\n* @example\n* var y = quantile( 0.0, 10, 0.4 );\n* // returns 0\n*\n* @example\n* var y = quantile( 1.0, 10, 0.4 );\n* // returns 10\n*\n* @example\n* var y = quantile( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.2, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.2, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 20, 1.5 );\n* // returns NaN\n*/\nfunction quantile( r, n, p ) {\n\tvar sigmaInv;\n\tvar guess;\n\tvar sigma;\n\tvar corr;\n\tvar mu;\n\tvar x2;\n\tvar x;\n\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tr < 0.0 ||\n\t\tr > 1.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( r === 1.0 || p === 1.0 ) {\n\t\treturn n;\n\t}\n\tif ( r === 0.0 || p === 0.0 || n === 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Cornish-Fisher expansion:\n\tmu = n * p;\n\tsigma = sqrt( n * p * ( 1.0-p ) );\n\tsigmaInv = 1.0 / sigma;\n\tif ( r < 0.5 ) {\n\t\tx = -erfcinv( 2.0 * r ) * SQRT2;\n\t} else {\n\t\tx = erfcinv( 2.0 * ( 1.0-r ) ) * SQRT2;\n\t}\n\tx2 = x * x;\n\n\t// Skewness correction:\n\tcorr = x + ( sigmaInv * ( x2-1.0 ) / 6.0 );\n\tguess = round( mu + (sigma * corr) );\n\tif ( cdf( guess, n, p ) >= r ) {\n\t\treturn searchLeft( guess, r, n, p );\n\t}\n\treturn searchRight( guess, r, n, p );\n}\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math-base-assert-is-nonnegative-integer' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar degenerate = require( '@stdlib/stats-base-dists-degenerate-quantile' ).factory;\nvar erfcinv = require( '@stdlib/math-base-special-erfcinv' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar round = require( '@stdlib/math-base-special-round' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar cdf = require( '@stdlib/stats-base-dists-binomial-cdf' );\nvar SQRT2 = require( '@stdlib/constants-float64-sqrt-two' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar searchLeft = require( './search_left.js' );\nvar searchRight = require( './search_right.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10, 0.5 );\n* var y = quantile( 0.1 );\n* // returns 3\n*\n* y = quantile( 0.9 );\n* // returns 7\n*/\nfunction factory( n, p ) {\n\tvar sigmaInv;\n\tvar sigma;\n\tvar mu;\n\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( p === 0.0 || n === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn degenerate( n );\n\t}\n\tmu = n * p;\n\tsigma = sqrt( n * p * ( 1.0-p ) );\n\tsigmaInv = 1.0 / sigma;\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a binomial distribution.\n\t*\n\t* @private\n\t* @param {Probability} r - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( r ) {\n\t\tvar guess;\n\t\tvar corr;\n\t\tvar x2;\n\t\tvar x;\n\n\t\tif ( isnan( r ) || r < 0.0 || r > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( r === 0.0 ) {\n\t\t\treturn 0;\n\t\t}\n\t\tif ( r === 1.0 ) {\n\t\t\treturn n;\n\t\t}\n\t\t// Cornish-Fisher expansion:\n\t\tif ( r < 0.5 ) {\n\t\t\tx = -erfcinv( 2.0 * r ) * SQRT2;\n\t\t} else {\n\t\t\tx = erfcinv( 2.0 * ( 1.0-r ) ) * SQRT2;\n\t\t}\n\t\tx2 = x * x;\n\n\t\t// Skewness correction:\n\t\tcorr = x + ( sigmaInv * ( x2-1.0 ) / 6.0 );\n\t\tguess = round( mu + (sigma * corr) );\n\t\tif ( cdf( guess, n, p ) >= r ) {\n\t\t\treturn searchLeft( guess, r, n, p );\n\t\t}\n\t\treturn searchRight( guess, r, n, p );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-binomial-quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats-base-dists-binomial-quantile' );\n*\n* var y = quantile( 0.4, 20, 0.2 );\n* // returns 2\n*\n* y = quantile( 0.8, 20, 0.2 );\n* // returns 5\n*\n* y = quantile( 0.5, 10, 0.4 );\n* // returns 4\n*\n* @example\n* var factory = require( '@stdlib/stats-base-dists-binomial-quantile' ).factory;\n*\n* var quantile = factory( 10, 0.5 );\n*\n* var y = quantile( 0.1 );\n* // returns 3\n*\n* y = quantile( 0.9 );\n* // returns 7\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAM,QAAS,uCAAwC,EAe3D,SAASC,EAAYC,EAAGC,EAAGC,EAAGC,EAAI,CACjC,KAAQH,IAAM,GAAKF,EAAKE,EAAE,EAAGE,EAAGC,CAAC,GAAKF,GACrCD,GAAI,EAEL,OAAOA,CACR,CAKAH,EAAO,QAAUE,IC/CjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAM,QAAS,uCAAwC,EAe3D,SAASC,EAAaC,EAAGC,EAAGC,EAAGC,EAAI,CAElC,IADAH,GAAK,EACGF,EAAKE,EAAGE,EAAGC,CAAE,EAAIF,GACxBD,GAAK,EAEN,OAAOA,CACR,CAKAH,EAAO,QAAUE,IChDjB,IAAAK,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,EAAuB,QAAS,iDAAkD,EAClFC,EAAU,QAAS,mCAAoC,EACvDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EACjDC,EAAM,QAAS,uCAAwC,EACvDC,EAAQ,QAAS,oCAAqC,EACtDC,EAAO,QAAS,gCAAiC,EACjDC,EAAa,IACbC,EAAc,IA6DlB,SAASC,EAAU,EAAGC,EAAGC,EAAI,CAC5B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,OACCjB,EAAO,CAAE,GACTA,EAAOS,CAAE,GACTT,EAAOU,CAAE,GACT,EAAI,GACJ,EAAI,GACJA,EAAI,GACJA,EAAI,GACJ,CAACZ,EAAsBW,CAAE,GACzBA,IAAMJ,EAEC,IAEH,IAAM,GAAOK,IAAM,EAChBD,EAEH,IAAM,GAAOC,IAAM,GAAOD,IAAM,EAC7B,GAGRM,EAAKN,EAAIC,EACTG,EAAQX,EAAMO,EAAIC,GAAM,EAAIA,EAAI,EAChCC,EAAW,EAAME,EACZ,EAAI,GACRI,EAAI,CAAClB,EAAS,EAAM,CAAE,EAAIK,EAE1Ba,EAAIlB,EAAS,GAAQ,EAAI,EAAI,EAAIK,EAElCY,EAAKC,EAAIA,EAGTH,EAAOG,EAAMN,GAAaK,EAAG,GAAQ,EACrCJ,EAAQX,EAAOc,EAAMF,EAAQC,CAAM,EAC9BX,EAAKS,EAAOH,EAAGC,CAAE,GAAK,EACnBJ,EAAYM,EAAO,EAAGH,EAAGC,CAAE,EAE5BH,EAAaK,EAAO,EAAGH,EAAGC,CAAE,EACpC,CAKAb,EAAO,QAAUW,IC/IjB,IAAAU,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,EAAuB,QAAS,iDAAkD,EAClFC,EAAmB,QAAS,iCAAkC,EAC9DC,EAAa,QAAS,8CAA+C,EAAE,QACvEC,EAAU,QAAS,mCAAoC,EACvDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EACjDC,EAAM,QAAS,uCAAwC,EACvDC,EAAQ,QAAS,oCAAqC,EACtDC,EAAO,QAAS,gCAAiC,EACjDC,EAAa,IACbC,EAAc,IAoBlB,SAASC,EAASC,EAAGC,EAAI,CACxB,IAAIC,EACAC,EACAC,EAEJ,GACCb,EAAOS,CAAE,GACTT,EAAOU,CAAE,GACT,CAACd,EAAsBa,CAAE,GACzBA,IAAMJ,GACNK,EAAI,GACJA,EAAI,EAEJ,OAAOb,EAAkB,GAAI,EAE9B,GAAKa,IAAM,GAAOD,IAAM,EACvB,OAAOX,EAAY,CAAI,EAExB,GAAKY,IAAM,EACV,OAAOZ,EAAYW,CAAE,EAEtB,OAAAI,EAAKJ,EAAIC,EACTE,EAAQV,EAAMO,EAAIC,GAAM,EAAIA,EAAI,EAChCC,EAAW,EAAMC,EACVE,EAaP,SAASA,EAAUC,EAAI,CACtB,IAAIC,EACAC,EACAC,EACAC,EAEJ,OAAKnB,EAAOe,CAAE,GAAKA,EAAI,GAAOA,EAAI,EAC1B,IAEHA,IAAM,EACH,EAEHA,IAAM,EACHN,GAGHM,EAAI,GACRI,EAAI,CAACpB,EAAS,EAAMgB,CAAE,EAAIX,EAE1Be,EAAIpB,EAAS,GAAQ,EAAIgB,EAAI,EAAIX,EAElCc,EAAKC,EAAIA,EAGTF,EAAOE,EAAMR,GAAaO,EAAG,GAAQ,EACrCF,EAAQf,EAAOY,EAAMD,EAAQK,CAAM,EAC9Bd,EAAKa,EAAOP,EAAGC,CAAE,GAAKK,EACnBT,EAAYU,EAAOD,EAAGN,EAAGC,CAAE,EAE5BH,EAAaS,EAAOD,EAAGN,EAAGC,CAAE,EACpC,CACD,CAKAf,EAAO,QAAUa,IC3EjB,IAAIY,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_search_left", "__commonJSMin", "exports", "module", "cdf", "searchLeft", "x", "r", "n", "p", "require_search_right", "__commonJSMin", "exports", "module", "cdf", "searchRight", "x", "r", "n", "p", "require_main", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "erfcinv", "isnan", "round", "sqrt", "cdf", "SQRT2", "PINF", "searchLeft", "searchRight", "quantile", "n", "p", "sigmaInv", "guess", "sigma", "corr", "mu", "x2", "x", "require_factory", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "constantFunction", "degenerate", "erfcinv", "isnan", "round", "sqrt", "cdf", "SQRT2", "PINF", "searchLeft", "searchRight", "factory", "n", "p", "sigmaInv", "sigma", "mu", "quantile", "r", "guess", "corr", "x2", "x", "setReadOnly", "main", "factory"]
}
